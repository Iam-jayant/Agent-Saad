import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from config import Config

logger = logging.getLogger(__name__)

class EmailAlerter:
    def __init__(self):
        self.smtp_server = Config.SMTP_SERVER
        self.smtp_port = Config.SMTP_PORT
        self.username = Config.SMTP_USERNAME
        self.password = Config.SMTP_PASSWORD
        self.recipient = Config.ALERT_EMAIL_TO
    
    def send_alert(self, alert_data: dict) -> bool:
        """
        Send an alert via email
        
        Args:
            alert_data: Dictionary containing alert information
        
        Returns:
            bool: True if sent successfully, False otherwise
        """
        if not all([self.smtp_server, self.username, self.password, self.recipient]):
            logger.warning("Email configuration incomplete, skipping alert")
            return False
        
        try:
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"ðŸš¨ Agent Saad Alert: {alert_data.get('urgency_level', 'MEDIUM')} Priority Sentiment Issue"
            msg['From'] = self.username
            msg['To'] = self.recipient
            
            # Create HTML body
            html_body = self._create_html_body(alert_data)
            
            # Create plain text body
            text_body = self._create_text_body(alert_data)
            
            # Attach parts
            part1 = MIMEText(text_body, 'plain')
            part2 = MIMEText(html_body, 'html')
            msg.attach(part1)
            msg.attach(part2)
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.send_message(msg)
            
            logger.info(f"Email alert sent successfully to {self.recipient}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending email alert: {e}")
            return False
    
    def _create_text_body(self, alert_data: dict) -> str:
        """Create plain text email body"""
        return f"""
Agent Saad - Customer Sentiment Alert
{'='*50}

URGENCY: {alert_data.get('urgency_level', 'MEDIUM')}
SOURCE: {alert_data.get('source', 'Unknown')}
AUTHOR: {alert_data.get('author', 'Unknown')}
SENTIMENT: {alert_data.get('sentiment_label', 'Unknown')} (Score: {alert_data.get('sentiment_score', 0):.2f})

CONTENT:
{alert_data.get('content', '')}

RECOMMENDED RESPONSE:
{alert_data.get('recommended_response', 'No recommendation available')}

VIEW POST: {alert_data.get('url', 'N/A')}

---
Generated by Agent Saad at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    def _create_html_body(self, alert_data: dict) -> str:
        """Create HTML email body"""
        urgency = alert_data.get('urgency_level', 'MEDIUM')
        urgency_colors = {
            'CRITICAL': '#FF0000',
            'HIGH': '#FF6600',
            'MEDIUM': '#FFCC00',
            'LOW': '#0099CC'
        }
        color = urgency_colors.get(urgency, '#0099CC')
        
        return f"""
<!DOCTYPE html>
<html>
<head>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background-color: {color}; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }}
        .content {{ background-color: #f9f9f9; padding: 20px; border: 1px solid #ddd; border-top: none; }}
        .field {{ margin-bottom: 15px; }}
        .field-label {{ font-weight: bold; color: #555; }}
        .field-value {{ margin-top: 5px; }}
        .content-box {{ background-color: white; padding: 15px; border-left: 3px solid {color}; margin: 15px 0; }}
        .button {{ display: inline-block; padding: 10px 20px; background-color: {color}; color: white; text-decoration: none; border-radius: 5px; margin-top: 15px; }}
        .footer {{ text-align: center; margin-top: 20px; font-size: 12px; color: #999; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>ðŸš¨ Agent Saad Sentiment Alert</h2>
            <p>{urgency} Priority</p>
        </div>
        <div class="content">
            <div class="field">
                <div class="field-label">Source:</div>
                <div class="field-value">{alert_data.get('source', 'Unknown')}</div>
            </div>
            <div class="field">
                <div class="field-label">Author:</div>
                <div class="field-value">{alert_data.get('author', 'Unknown')}</div>
            </div>
            <div class="field">
                <div class="field-label">Sentiment:</div>
                <div class="field-value">{alert_data.get('sentiment_label', 'Unknown')} (Score: {alert_data.get('sentiment_score', 0):.2f})</div>
            </div>
            <div class="content-box">
                <div class="field-label">Content:</div>
                <div class="field-value">{alert_data.get('content', '')}</div>
            </div>
            <div class="content-box">
                <div class="field-label">Recommended Response:</div>
                <div class="field-value">{alert_data.get('recommended_response', 'No recommendation available')}</div>
            </div>
            {f'<a href="{alert_data.get("url")}" class="button">View Original Post</a>' if alert_data.get('url') else ''}
        </div>
        <div class="footer">
            Generated by Agent Saad at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>
    </div>
</body>
</html>
"""
    
    def send_test_alert(self) -> bool:
        """Send a test alert to verify email integration"""
        test_data = {
            'source': 'Test',
            'author': 'Agent Saad',
            'content': 'This is a test alert from Agent Saad Customer Sentiment Alert System.',
            'sentiment_score': -0.5,
            'sentiment_label': 'NEGATIVE',
            'urgency_level': 'MEDIUM',
            'recommended_response': 'This is a test - no action required.',
            'url': 'https://github.com'
        }
        return self.send_alert(test_data)

